


[_QWERTY] = LAYOUT(
  KC_ESC,    KC_1,                KC_2,        KC_3,     KC_4,    KC_5,                                                KC_6,     KC_7,    KC_8,    KC_9,      KC_0,     KC_DEL,
  KC_CAPS,   KC_Q,                KC_W,        KC_E,     KC_R,    KC_T,      KC_GRV,                       KC_RBRC,    KC_Y,     KC_U,    KC_I,    KC_O,      KC_P,     KC_BSPC,
  KC_TAB,    KC_A,                KC_S,        KC_D,     KC_F,    KC_G,      KC_NO,                        KC_ALGR,    KC_H,     KC_J,    KC_K,    KC_L,      KC_SCLN,  KC_LBRC,
  KC_LSFT,   KC_NONUS_BACKSLASH,  KC_Z,        KC_X,     KC_C,    KC_V,      KC_SPC,                       KC_ENT,     KC_B,     KC_N,    KC_M,    KC_SLSH,   KC_UP,    KC_MINUS,
  KC_LCTRL,  MO(_LOWER),          KC_LGUI,     KC_LALT,  KC_DOT, KC_COMM,    KC_HOME,                      KC_END,     KC_SPC,   KC_QUOT, KC_BSLS, KC_LEFT,   KC_DOWN,  KC_RIGHT 
),






                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
//       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
//                    | GUI |     | SPC |   | ENT |     | ALT |


                        bindings = <
   &trans &kp UNDER      &kp F1   &kp F2 &kp F3   &kp F4   &kp F5           &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &kp F11 &mt RGUI F12
          &mt LCTRL PLUS &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT        &kp CRRT &kp AMPS &kp STAR &kp LPAR &kp RPAR &mt RCTRL MINUS
          &mt LALT EQUAL &kp N1   &kp N2 &kp N3   &kp N4   &kp N5           &kp N6   &kp N7   &kp N8   &kp N9   &kp N0   &trans
                                              &lt ADJ TAB &trans &trans   &trans &trans &lt ADJ DEL
                        >;
                };





                raise_layer {
// -----------------------------------------------------------------------------------------
// |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
//       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
//       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
//                          |     |     | ADJ |   | ADJ |     |     |
                        bindings = <
   &trans &kp KP_NUM    &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS        &kp C_VOL_UP &kp HOME &kp PSCRN &kp PG_UP &kp SLCK &kp CAPS &trans
          &mt LCTRL EQL &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS         &kp C_MUTE   &kp LEFT &kp UP    &kp RIGHT &kp INS  &mt RCTRL K_APP
          &trans        &kp KP_N0       &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT          &kp C_VOL_DN &kp END  &kp DOWN  &kp PG_DN &kp PAUS &trans
                                                           &trans &trans &lt ADJ RET   &lt ADJ ESC &trans &trans
                        >;
                };





                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |
                        bindings = <
   &reset &bootloader  &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &bootloader &reset
          &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
          &none        &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &none
                                                                    &trans &none &trans   &trans &none &trans
                        >;
                };
        };






&ext_power EP_TOG


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};










RC(0,1)  RC(0,2)  RC(0,3)  RC(0,4)  RC(0,5)  RC(0,6)                          RC(0,13)  RC(0,12)   RC(0,11)   RC(0,10)  RC(0,9)  RC(0,8)
RC(1,1)  RC(1,2)  RC(1,3)  RC(1,4)  RC(1,5)  RC(1,6)  RC(1,7)       RC(1,14)  RC(1,13)  RC(1,12)   RC(1,11)   RC(1,10)  RC(1,9)  RC(1,8)
RC(2,1)  RC(2,2)  RC(2,3)  RC(2,4)  RC(2,5)  RC(2,6)  RC(2,7)       RC(2,14)  RC(2,13)  RC(2,12)   RC(2,11)   RC(2,10)  RC(2,9)  RC(2,8)
RC(3,1)  RC(3,2)  RC(3,3)  RC(3,4)  RC(3,5)  RC(3,6)  RC(3,7)       RC(3,14)  RC(3,13)  RC(3,12)   RC(3,11)   RC(3,10)  RC(3,9)  RC(3,8)
RC(4,1)  RC(4,2)  RC(4,3)  RC(4,4)  RC(4,5)  RC(4,6)  RC(4,7)       RC(4,14)  RC(4,13)  RC(4,12)   RC(4,11)   RC(4,10)  RC(4,9)  RC(4,8)


RC(0,1)  RC(0,2)  RC(0,3)  RC(0,4)  RC(0,5)  RC(0,6)                         RC(0,9)  RC(0,10)   RC(0,11)   RC(0,12)  RC(0,13)  RC(0,14)
RC(1,1)  RC(1,2)  RC(1,3)  RC(1,4)  RC(1,5)  RC(1,6)  RC(1,7)       RC(1,8)  RC(1,9)  RC(1,10)   RC(1,11)   RC(1,12)  RC(1,13)  RC(1,14)
RC(2,1)  RC(2,2)  RC(2,3)  RC(2,4)  RC(2,5)  RC(2,6)  RC(2,7)       RC(2,8)  RC(2,9)  RC(2,10)   RC(2,11)   RC(2,12)  RC(2,13)  RC(2,14)
RC(3,1)  RC(3,2)  RC(3,3)  RC(3,4)  RC(3,5)  RC(3,6)  RC(3,7)       RC(3,8)  RC(3,9)  RC(3,10)   RC(3,11)   RC(3,12)  RC(3,13)  RC(3,14)
RC(4,1)  RC(4,2)  RC(4,3)  RC(4,4)  RC(4,5)  RC(4,6)  RC(4,7)       RC(4,8)  RC(4,9)  RC(4,10)   RC(4,11)   RC(4,12)  RC(4,13)  RC(4,14)



RC(0,1)  RC(0,2)  RC(0,3)  RC(0,4)  RC(0,5)  RC(0,6)                         RC(5,6)  RC(5,5)   RC(5,4)   RC(5,3)  RC(5,2)  RC(5,1)
RC(1,1)  RC(1,2)  RC(1,3)  RC(1,4)  RC(1,5)  RC(1,6)  RC(1,7)       RC(6,7)  RC(6,6)  RC(6,5)   RC(6,4)   RC(6,3)  RC(6,2)  RC(6,1)
RC(2,1)  RC(2,2)  RC(2,3)  RC(2,4)  RC(2,5)  RC(2,6)  RC(2,7)       RC(7,7)  RC(7,6)  RC(7,5)   RC(7,4)   RC(7,3)  RC(7,2)  RC(7,1)
RC(3,1)  RC(3,2)  RC(3,3)  RC(3,4)  RC(3,5)  RC(3,6)  RC(3,7)       RC(8,7)  RC(8,6)  RC(8,5)   RC(8,4)   RC(8,3)  RC(8,2)  RC(8,1)
RC(4,1)  RC(4,2)  RC(4,3)  RC(4,4)  RC(4,5)  RC(4,6)  RC(4,7)       RC(9,7)  RC(9,6)  RC(9,5)   RC(9,4)   RC(9,3)  RC(9,2)  RC(9,1)


&default_transform { // The matrix transform for this board is 6 columns over because the left half is 6 columns wide according to the matrix.
    col-offset = <7>;
};
